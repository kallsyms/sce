// @generated by protobuf-ts 2.8.1
// @generated from protobuf file "sce.proto" (package "sce", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message sce.Point
 */
export interface Point {
    /**
     * @generated from protobuf field: uint32 line = 1;
     */
    line: number;
    /**
     * @generated from protobuf field: uint32 col = 2;
     */
    col: number;
}
/**
 * @generated from protobuf message sce.Range
 */
export interface Range {
    /**
     * @generated from protobuf field: sce.Point start = 1;
     */
    start?: Point;
    /**
     * @generated from protobuf field: sce.Point end = 2;
     */
    end?: Point;
}
/**
 * @generated from protobuf message sce.Source
 */
export interface Source {
    /**
     * / The filename of the file to operate on. Mainly used for guessing the language.
     *
     * @generated from protobuf field: string filename = 1;
     */
    filename: string;
    /**
     * / The content (source) of the file to operate on.
     *
     * @generated from protobuf field: string content = 2;
     */
    content: string;
    /**
     * / The language of the file, if known.
     *
     * @generated from protobuf field: string language = 3;
     */
    language: string;
    /**
     * / The point of the cursor in the file.
     *
     * @generated from protobuf field: sce.Point point = 4;
     */
    point?: Point;
}
/**
 * @generated from protobuf message sce.SliceRequest
 */
export interface SliceRequest {
    /**
     * @generated from protobuf field: sce.Source source = 1;
     */
    source?: Source;
    /**
     * @generated from protobuf field: sce.SliceDirection direction = 2;
     */
    direction: SliceDirection;
}
/**
 * @generated from protobuf message sce.SliceResponse
 */
export interface SliceResponse {
    /**
     * / The list of ranges which should be removed/hidden to show the slice.
     *
     * @generated from protobuf field: repeated sce.Range to_remove = 1;
     */
    toRemove: Range[];
}
/**
 * @generated from protobuf message sce.InlineRequest
 */
export interface InlineRequest {
    /**
     * @generated from protobuf field: sce.Source source = 1;
     */
    source?: Source;
    /**
     * / The content (source) of the file which holds the definition of the target function
     *
     * @generated from protobuf field: string target_content = 2;
     */
    targetContent: string;
    /**
     * / The point of the target function definition
     *
     * @generated from protobuf field: sce.Point target_point = 3;
     */
    targetPoint?: Point;
}
/**
 * @generated from protobuf message sce.InlineResponse
 */
export interface InlineResponse {
    /**
     * / The full content of the file with the target function definition inlined.
     *
     * @generated from protobuf field: string content = 1;
     */
    content: string;
}
/**
 * @generated from protobuf enum sce.SliceDirection
 */
export enum SliceDirection {
    /**
     * @generated from protobuf enum value: BACKWARD = 0;
     */
    BACKWARD = 0,
    /**
     * @generated from protobuf enum value: FORWARD = 1;
     */
    FORWARD = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class Point$Type extends MessageType<Point> {
    constructor() {
        super("sce.Point", [
            { no: 1, name: "line", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "col", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<Point>): Point {
        const message = { line: 0, col: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Point>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Point): Point {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 line */ 1:
                    message.line = reader.uint32();
                    break;
                case /* uint32 col */ 2:
                    message.col = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Point, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 line = 1; */
        if (message.line !== 0)
            writer.tag(1, WireType.Varint).uint32(message.line);
        /* uint32 col = 2; */
        if (message.col !== 0)
            writer.tag(2, WireType.Varint).uint32(message.col);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sce.Point
 */
export const Point = new Point$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Range$Type extends MessageType<Range> {
    constructor() {
        super("sce.Range", [
            { no: 1, name: "start", kind: "message", T: () => Point },
            { no: 2, name: "end", kind: "message", T: () => Point }
        ]);
    }
    create(value?: PartialMessage<Range>): Range {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Range>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Range): Range {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* sce.Point start */ 1:
                    message.start = Point.internalBinaryRead(reader, reader.uint32(), options, message.start);
                    break;
                case /* sce.Point end */ 2:
                    message.end = Point.internalBinaryRead(reader, reader.uint32(), options, message.end);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Range, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* sce.Point start = 1; */
        if (message.start)
            Point.internalBinaryWrite(message.start, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* sce.Point end = 2; */
        if (message.end)
            Point.internalBinaryWrite(message.end, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sce.Range
 */
export const Range = new Range$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Source$Type extends MessageType<Source> {
    constructor() {
        super("sce.Source", [
            { no: 1, name: "filename", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "language", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "point", kind: "message", T: () => Point }
        ]);
    }
    create(value?: PartialMessage<Source>): Source {
        const message = { filename: "", content: "", language: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Source>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Source): Source {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string filename */ 1:
                    message.filename = reader.string();
                    break;
                case /* string content */ 2:
                    message.content = reader.string();
                    break;
                case /* string language */ 3:
                    message.language = reader.string();
                    break;
                case /* sce.Point point */ 4:
                    message.point = Point.internalBinaryRead(reader, reader.uint32(), options, message.point);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Source, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string filename = 1; */
        if (message.filename !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.filename);
        /* string content = 2; */
        if (message.content !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        /* string language = 3; */
        if (message.language !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.language);
        /* sce.Point point = 4; */
        if (message.point)
            Point.internalBinaryWrite(message.point, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sce.Source
 */
export const Source = new Source$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SliceRequest$Type extends MessageType<SliceRequest> {
    constructor() {
        super("sce.SliceRequest", [
            { no: 1, name: "source", kind: "message", T: () => Source },
            { no: 2, name: "direction", kind: "enum", T: () => ["sce.SliceDirection", SliceDirection] }
        ]);
    }
    create(value?: PartialMessage<SliceRequest>): SliceRequest {
        const message = { direction: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SliceRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SliceRequest): SliceRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* sce.Source source */ 1:
                    message.source = Source.internalBinaryRead(reader, reader.uint32(), options, message.source);
                    break;
                case /* sce.SliceDirection direction */ 2:
                    message.direction = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SliceRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* sce.Source source = 1; */
        if (message.source)
            Source.internalBinaryWrite(message.source, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* sce.SliceDirection direction = 2; */
        if (message.direction !== 0)
            writer.tag(2, WireType.Varint).int32(message.direction);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sce.SliceRequest
 */
export const SliceRequest = new SliceRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SliceResponse$Type extends MessageType<SliceResponse> {
    constructor() {
        super("sce.SliceResponse", [
            { no: 1, name: "to_remove", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Range }
        ]);
    }
    create(value?: PartialMessage<SliceResponse>): SliceResponse {
        const message = { toRemove: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SliceResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SliceResponse): SliceResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated sce.Range to_remove */ 1:
                    message.toRemove.push(Range.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SliceResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated sce.Range to_remove = 1; */
        for (let i = 0; i < message.toRemove.length; i++)
            Range.internalBinaryWrite(message.toRemove[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sce.SliceResponse
 */
export const SliceResponse = new SliceResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InlineRequest$Type extends MessageType<InlineRequest> {
    constructor() {
        super("sce.InlineRequest", [
            { no: 1, name: "source", kind: "message", T: () => Source },
            { no: 2, name: "target_content", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "target_point", kind: "message", T: () => Point }
        ]);
    }
    create(value?: PartialMessage<InlineRequest>): InlineRequest {
        const message = { targetContent: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InlineRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InlineRequest): InlineRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* sce.Source source */ 1:
                    message.source = Source.internalBinaryRead(reader, reader.uint32(), options, message.source);
                    break;
                case /* string target_content */ 2:
                    message.targetContent = reader.string();
                    break;
                case /* sce.Point target_point */ 3:
                    message.targetPoint = Point.internalBinaryRead(reader, reader.uint32(), options, message.targetPoint);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InlineRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* sce.Source source = 1; */
        if (message.source)
            Source.internalBinaryWrite(message.source, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string target_content = 2; */
        if (message.targetContent !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.targetContent);
        /* sce.Point target_point = 3; */
        if (message.targetPoint)
            Point.internalBinaryWrite(message.targetPoint, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sce.InlineRequest
 */
export const InlineRequest = new InlineRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InlineResponse$Type extends MessageType<InlineResponse> {
    constructor() {
        super("sce.InlineResponse", [
            { no: 1, name: "content", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<InlineResponse>): InlineResponse {
        const message = { content: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InlineResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InlineResponse): InlineResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string content */ 1:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InlineResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string content = 1; */
        if (message.content !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message sce.InlineResponse
 */
export const InlineResponse = new InlineResponse$Type();
/**
 * @generated ServiceType for protobuf service sce.SCE
 */
export const SCE = new ServiceType("sce.SCE", [
    { name: "Slice", options: {}, I: SliceRequest, O: SliceResponse },
    { name: "Inline", options: {}, I: InlineRequest, O: InlineResponse }
]);
