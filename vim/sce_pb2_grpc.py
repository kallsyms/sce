# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import sce_pb2 as sce__pb2


class SCEStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Slice = channel.unary_unary(
                '/sce.SCE/Slice',
                request_serializer=sce__pb2.SliceRequest.SerializeToString,
                response_deserializer=sce__pb2.SliceResponse.FromString,
                )
        self.Inline = channel.unary_unary(
                '/sce.SCE/Inline',
                request_serializer=sce__pb2.InlineRequest.SerializeToString,
                response_deserializer=sce__pb2.InlineResponse.FromString,
                )


class SCEServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Slice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Inline(self, request, context):
        """/ Request to inline the given target function at the given call site.
        / N.B. Some LSPs support inlining already (see https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#:~:text=constant%0A%09%20*%20%2D%20...%0A%09%20*/%0A%09export%20const-,RefactorInline,-%3A%20CodeActionKind%20%3D)
        / however many don't (notably clangd/any C(++) LSP I can find),
        / so this still provides one (albeit a "simpler" AST-based approach).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SCEServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Slice': grpc.unary_unary_rpc_method_handler(
                    servicer.Slice,
                    request_deserializer=sce__pb2.SliceRequest.FromString,
                    response_serializer=sce__pb2.SliceResponse.SerializeToString,
            ),
            'Inline': grpc.unary_unary_rpc_method_handler(
                    servicer.Inline,
                    request_deserializer=sce__pb2.InlineRequest.FromString,
                    response_serializer=sce__pb2.InlineResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'sce.SCE', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SCE(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Slice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sce.SCE/Slice',
            sce__pb2.SliceRequest.SerializeToString,
            sce__pb2.SliceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Inline(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/sce.SCE/Inline',
            sce__pb2.InlineRequest.SerializeToString,
            sce__pb2.InlineResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
